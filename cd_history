#!/bin/bash
APP_NAME="cd_history"
APP_DESCRIPTION="Manageable traverseable history."
APP_DIR=${BASH_SOURCE%/*}
APP_VERSION="0.1"
APP_AUTHOR="rednammoc"
APP_AUTHOR_EMAIL="rednammoc@gmx.de"

# Load bash-utils core.
if [[ ! -d "$APP_DIR" ]]; then APP_DIR="$PWD"; fi
BASH_UTILS_DIR="${APP_DIR}/lib/bash-utils/src/utils"
source "${BASH_UTILS_DIR}/core_utils.sh"

# Require utils.
require "list_utils.sh"
require "os_utils.sh"

CD_HISTORY_BASE="$HOME/.cd_history"
CD_HISTORY_SIZE_MAX=100
CD_HISTORY_SEP_BY_TERM=true

CD_HISTORY_POS=()
CD_HISTORY_POS_FILE="$HOME/.cd_history_pos"

function cd_history
{
	local list=$(cd_history_list_get)
	if [ "$1" == "-a" ]
	then
		local path="$2"
		[ -z "${path}" ] && path="$(pwd)"
		local pos=$(expr $(cd_history_pos_cur "${list}") + 1)
		list_put "${list}" "${path}" "${pos}"
		
		# Remove first entry as long as history is greater than max-size.
        while [ ${list_size} -gt ${CD_HISTORY_SIZE_MAX} ]
        do
            list_delete "${list}" "1"
			[[ "${pos}" -gt 1 ]] && cd_history_pos_set "${list}" "$(expr ${pos} - 1)"
            list_size=$(expr ${list_size} - 1)
        done
		cd_history_pos_set "${list}" "${pos}"
	elif [ "$1" == "-d" ]
	then
		local index="$2"
		local pos=$(cd_history_pos_cur "${list}") 
		if [[ "${index}" -lt "${pos}" ]]
		then
			cd_history_pos_set "${list}" "$(expr ${pos} - 1)"
		fi
		list_delete "${list}" "${index}"
	elif [ "$1" == "-l" ]
	then
		if [ -f "${list}" ]
		then
			local index=$(cd_history_pos_get "${list}")
			list_enumerate "${list}" "${index}"
		fi
	elif [ "$1" == "-c" ]
	then
		list_clear "${list}"	
		cd_history_pos_set "${list}" 0
	elif [ "$1" == "-r" ]
	then
		local index="$2"
		cd_history_pos_set "${list}" "${index}" || return 1
		local dir=$(cd_history_dir_cur)
		! [ -z "${dir}" ] && builtin cd "${dir}"
	elif [ "$1" == "+" ] || [ "$1" == "-" ]
	then
		local pos=""
		[ "$1" == "+" ] && pos=$(cd_history_pos_next "${list}")
		[ "$1" == "-" ] && pos=$(cd_history_pos_prev "${list}")
		if ! [ -z "${pos}" ]
		then
			local dir=$(list_get "${list}" "${pos}")
			builtin cd "${dir}"
			cd_history_pos_set "${list}" "${pos}"
			return 0
		fi
	elif [ "$1" == "-i" ]
	then
		echo "{ profile: ${list}, size: $(list_size ${list}) }"
	elif [ "$1" == "-h" ] || [ "$1" == "--help" ]
	then
		cat <<EOM
Usage: ${APP_NAME} [options]
            
Options:
  -                go to previous #position.
  +                go to next #position.
  -a [path]        add path to history after current position.
                    when no path is specified the current working directory will be added.
  -c               clear history.
  -d <position>    remove path at #position from history.
  -i               show profile-info.
  -l               list history and highlight current position.
  -r <position>    go to directory at #position.
  -h, --help       show this help message and exit.
EOM
	else
		echo "$list"
		if [ -f "${list}" ]
		then
			local default_item=$(cd_history_pos_get "${list}")
			eval `resize`
			local win_height=$LINES
			local win_width=$COLUMNS
			local list_height=$(( $LINES - 8 ))
			local list=$(list_enumerate "${list}")
			local selection=$(whiptail --default-item "${default_item}" --menu "Select an entry:" "${win_height}" "${win_width}" "${list_height}" ${list} 3>&1 1>&2 2>&3)
			cd_history -r "${selection}"
		fi
	fi
}

function cd_history_validate
{
	# validate list
	local list=$1
	! [ -f "$1" ] && return 1

	# validate size
	local size=$(list_size "${list}")
	[ "${size}" -eq 0 ] && return 1

	return 0
}

function cd_history_dir_cur
{
	local list="$1"
	local pos=$(cd_history_pos_cur "${list}")
	! [ -z "${pos}" ] && list_get "${list}" "${pos}"
}

function cd_history_pos_cur
{
	! cd_history_validate $1 && return 1
	local list="$1"
	cd_history_pos_get "${list}"
}

function cd_history_pos_next
{
	! cd_history_validate $1 && return 1
	local list="$1"
	local size=$(list_size "${list}")
	local index=$(cd_history_pos_get "${list}")
	if [ ${index} -lt ${size} ] ; then
		index=$(expr ${index} + 1)
	fi
	echo "${index}"
}

function cd_history_pos_prev
{
	! cd_history_validate $1 && return 1
	local list="$1"
	local size=$(list_size "${list}")
	local index=$(cd_history_pos_get "${list}")
	if [ ${index} -gt 1 ] ; then
		index=$(expr ${index} - 1)
	fi
	echo "${index}"
}

function cd_history_pos_get
{
	! cd_history_validate $1 && return 1
	local list="$1"
	local size=$(list_size "$1")
	local pid=$(pid_leader)
	[ -f "${CD_HISTORY_POS_FILE}" ] && source "${CD_HISTORY_POS_FILE}"
	local pos="${CD_HISTORY_POS[${pid}]}"
	if [ -z "${pos}" ] ; then 
		pos=${size}
		CD_HISTORY_POS[${pid}]=${pos}
	fi
	echo ${pos}
}

function cd_history_pos_set
{
	! cd_history_validate "$1" 	&& return 1
	local list="$1"
	local pos=$2
	local size=$(list_size "$1")
	local pid=$(pid_leader)
	[ -f "${CD_HISTORY_POS_FILE}" ] && source "${CD_HISTORY_POS_FILE}"
	if [ ${pos} -le 0 ] ; then
		CD_HISTORY_POS[${pid}]=1
	elif [ ${pos} -le ${size} ] ; then
		CD_HISTORY_POS[${pid}]=${pos}
	elif [ ${pos} -gt ${size} ] ; then
		CD_HISTORY_POS[${pid}]=${size}
	else
		echo "Unknown Error."
		return 1
	fi
	set | grep ^CD_HISTORY_POS= > "${CD_HISTORY_POS_FILE}"
}

function cd_history_list_get
{
	local list=${CD_HISTORY_BASE}
	[ "${CD_HISTORY_SEP_BY_TERM}" ] && list="${list}.$(pid_leader)"
	echo "${list}"
}
cd_history $@
